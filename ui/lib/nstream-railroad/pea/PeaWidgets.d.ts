import { Value, MapDownlinkFastener, ValueDownlinkFastener } from "@swim/runtime";
import { Model, ModelRef, SelectableTrait, TraitRef } from "@swim/toolkit";
import { EntityTrait, WidgetGroup } from "@swim/platform";
export declare class PeaWidgets extends WidgetGroup {
    protected updateCurrentInfoTable(value: Value): void;
    readonly currentInfoTable: ModelRef<this, Model>;
    protected updateMostImpactedKpiTable(value: Value): void;
    readonly mostImpactedKpiTable: ModelRef<this, Model>;
    protected updateAlertCountsTable(value: Value): void;
    readonly alertCountsTable: ModelRef<this, Model>;
    readonly alertsWidget: ModelRef<this, Model>;
    protected updateAlertHistoryCharts(newStatus: Value, oldStatus: Value): void;
    protected createAlertHistoryChartTitle(alertName: string): Model;
    protected createAlertHistoryChart(alertName: string, timestamp: number, previousMax: number): Model;
    protected updateAlertChartCurrentTimestamp(alertName: string, timestamp: number, alertCount: number): void;
    protected removeAllAlertHistoryCharts(): void;
    protected didSyncAlertHistory(): void;
    protected updateOverallUsersImpactedGauge(value: Value): void;
    readonly overallUsersImpactedGauge: ModelRef<this, Model>;
    protected updateUsersImpactedBreakdown(value: Value): void;
    readonly usersImpactedBreakdown: ModelRef<this, Model>;
    readonly usersImpactedWidget: ModelRef<this, Model>;
    protected updateWorstOffendersTable(value: Value): void;
    readonly worstOffendersBreakdown: ModelRef<this, Model>;
    readonly worstOffendersWidget: ModelRef<this, Model>;
    protected updateOverallScoreGauge(value: Value): void;
    readonly overallScoreGauge: ModelRef<this, Model>;
    protected updateScoreBreakdown(value: Value): void;
    private getStatusFactorFromScore;
    readonly scoreBreakdown: ModelRef<this, Model>;
    readonly scoreWidget: ModelRef<this, Model>;
    protected updateInfoTable(value: Value): void;
    readonly infoTable: ModelRef<this, Model>;
    readonly infoWidget: ModelRef<this, Model>;
    readonly statusDownlink: ValueDownlinkFastener<this, Value>;
    readonly alertHistoryDownlink: MapDownlinkFastener<this, number, Value>;
    readonly poorPerformersDownlink: ValueDownlinkFastener<this, Value>;
    readonly infoDownlink: ValueDownlinkFastener<this, Value>;
    readonly selectable: TraitRef<this, SelectableTrait>;
    readonly entity: TraitRef<this, EntityTrait>;
}
