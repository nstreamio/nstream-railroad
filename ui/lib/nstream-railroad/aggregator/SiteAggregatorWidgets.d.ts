import { Value, MapDownlinkFastener, ValueDownlinkFastener } from "@swim/runtime";
import { Model, ModelRef, SelectableTrait, TraitRef } from "@swim/toolkit";
import { EntityTrait, WidgetGroup } from "@swim/platform";
export declare class SiteAggregatorWidgets extends WidgetGroup {
    type: string;
    constructor(type: string);
    protected updateStatusTable(value: Value): void;
    private getStatusFactorFromAlertCount;
    readonly statusTable: ModelRef<this, Model>;
    readonly statusWidget: ModelRef<this, Model>;
    protected updateInfoTable(value: Value): void;
    readonly infoTable: ModelRef<this, Model>;
    readonly infoWidget: ModelRef<this, Model>;
    protected updateCurrentInfoTable(value: Value): void;
    readonly currentInfoTable: ModelRef<this, Model>;
    protected updateMostImpactedKpiTable(value: Value): void;
    readonly mostImpactedKpiTable: ModelRef<this, Model>;
    protected updateAlertCountsTable(value: Value): void;
    readonly alertCountsTable: ModelRef<this, Model>;
    readonly alertsWidget: ModelRef<this, Model>;
    protected updateOverallUsersImpactedGauge(value: Value): void;
    readonly overallUsersImpactedGauge: ModelRef<this, Model>;
    readonly usersImpactedWidget: ModelRef<this, Model>;
    protected updateAlertHistoryCharts(newStatus: Value, oldStatus: Value): void;
    protected createAlertHistoryChartTitle(alertName: string): Model;
    protected createAlertHistoryChart(alertName: string, timestamp: number, previousMax: number): Model;
    protected updateAlertChartCurrentTimestamp(alertName: string, timestamp: number, alertCount: number): void;
    protected removeAllAlertHistoryCharts(): void;
    protected didSyncAlertHistory(): void;
    readonly kpiBreakdownWidget: ModelRef<this, Model>;
    protected updateWorstOverallDegradationTable(key: Value, value: Value, oldValue: Value): void;
    readonly worstOverallDegradationTable: ModelRef<this, Model>;
    readonly worstSitesWidget: ModelRef<this, Model>;
    protected updateMissingDataTable(newValue: Value, oldValue: Value): void;
    readonly missingDataTable: ModelRef<this, Model>;
    readonly missingDataWidget: ModelRef<this, Model>;
    readonly infoDownlink: ValueDownlinkFastener<this, Value>;
    readonly statusDownlink: ValueDownlinkFastener<this, Value>;
    readonly alertHistoryDownlink: MapDownlinkFastener<this, number, Value>;
    readonly worstOverallDegradationDownlink: ValueDownlinkFastener<this, Value, Value>;
    readonly missingDataDownlink: ValueDownlinkFastener<this, Value>;
    readonly selectable: TraitRef<this, SelectableTrait>;
    readonly entity: TraitRef<this, EntityTrait>;
}
